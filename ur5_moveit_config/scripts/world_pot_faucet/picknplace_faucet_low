#!/usr/bin/env python3
"""
A script to outline the fundamentals of the moveit_py motion planning API.
"""

import time
from math import pi
# generic ros libraries
import rclpy
from rclpy.logging import get_logger

# moveit python library
from moveit.core.robot_state import RobotState
from moveit.planning import (
    MoveItPy,
    MultiPipelinePlanRequestParameters,
    PlanRequestParameters,
)
from geometry_msgs.msg import PoseStamped

from tf_transformations import quaternion_from_euler

def plan_and_execute(
    robot,
    planning_component,
    logger,
    single_plan_parameters=None,
    multi_plan_parameters=None,
    sleep_time=0.0,
):
    """Helper function to plan and execute a motion."""
    # plan to goal
    logger.info("Planning trajectory")
    if multi_plan_parameters is not None:
        plan_result = planning_component.plan(
            multi_plan_parameters=multi_plan_parameters
        )
    elif single_plan_parameters is not None:
        plan_result = planning_component.plan(
            single_plan_parameters=single_plan_parameters
        )
    else:
        plan_result = planning_component.plan()

    # execute the plan
    if plan_result:
        logger.info("Executing plan")
        robot_trajectory = plan_result.trajectory
        robot.execute(robot_trajectory, controllers=[])
    else:
        logger.error("Planning failed")

    time.sleep(sleep_time) 

def closedGripper():
    """Specifies closed grasp posture for the pick and place motions"""
    # specify which end effector joints are involved in the grasp
    gripper.set_start_state_to_current_state()

    # set constraints message
    joint_values = {
            "robotiq_85_left_knuckle_joint": 0.8,
            "robotiq_85_right_knuckle_joint": -0.8,
    }
    robot_state.joint_positions = joint_values
    gripper.set_goal_state(robot_state=robot_state)
    single_plan_request_params = PlanRequestParameters(
        ur5, "stomp_planner")

    plan_and_execute(ur5, gripper, logger, sleep_time=1.0, single_plan_parameters=single_plan_request_params)

def openGripper():
    """Specifies open grasp posture for the pick and place motions"""
    # specify which end effector joints are involved in the grasp
    # set plan start state to current state
    gripper.set_start_state_to_current_state()

    # set constraints message
    joint_values = {
            "robotiq_85_left_knuckle_joint": 0.04,
            "robotiq_85_right_knuckle_joint": -0.04,
    }
    robot_state.joint_positions = joint_values
    gripper.set_goal_state(robot_state=robot_state)
    single_plan_request_params = PlanRequestParameters(
        ur5, "stomp_planner")

    plan_and_execute(ur5, gripper, logger, sleep_time=1.0, single_plan_parameters=single_plan_request_params)


def pick(move_group):
    """Specifies, plans, and executes a pick operation."""

    single_plan_request_params = PlanRequestParameters(
        ur5, "ompl_rrtc")
    
    # initialise multi-pipeline plan request parameters
    multi_pipeline_plan_request_params = MultiPipelinePlanRequestParameters(
        ur5, ["ompl_rrtc", "stomp_planner"]
    )
    # set plan start state to current state
    ur5_arm.set_start_state_to_current_state()

    # Create a goal position for picking
    pose_goal = PoseStamped()
    pose_goal.header.frame_id = "base_link"
    pose_goal.header.stamp = rclpy.time.Time().to_msg()
    quat = quaternion_from_euler(0.0, 1.57, 1.57)
    pose_goal.pose.orientation.x = quat[0]
    pose_goal.pose.orientation.y = quat[1]
    pose_goal.pose.orientation.z = quat[2]
    pose_goal.pose.orientation.w = quat[3]
    pose_goal.pose.position.x = 0.28
    pose_goal.pose.position.y = -0.23
    pose_goal.pose.position.z = 0.1267
    ur5_arm.set_goal_state(pose_stamped_msg=pose_goal, pose_link="flange")
    plan_and_execute(ur5, ur5_arm, logger, sleep_time=1.0, single_plan_parameters=single_plan_request_params)

    # Finally we specify the parameters for the open and close
    # posture of the grasp 
    openGripper()

    # set plan start state to current state
    ur5_arm.set_start_state_to_current_state()

    pose_goal = PoseStamped()
    pose_goal.header.frame_id = "base_link"
    pose_goal.header.stamp = rclpy.time.Time().to_msg()
    quat = quaternion_from_euler(0.0, 1.57, 1.57)
    pose_goal.pose.orientation.x = quat[0]
    pose_goal.pose.orientation.y = quat[1]
    pose_goal.pose.orientation.z = quat[2]
    pose_goal.pose.orientation.w = quat[3]
    pose_goal.pose.position.x = 0.28
    pose_goal.pose.position.y = -0.23
    pose_goal.pose.position.z = 0.005
    ur5_arm.set_goal_state(pose_stamped_msg=pose_goal, pose_link="flange")
    plan_and_execute(ur5, ur5_arm, logger, sleep_time=1.0, single_plan_parameters=single_plan_request_params)

    closedGripper()

    ur5_arm.set_start_state_to_current_state()

    pose_goal = PoseStamped()
    pose_goal.header.frame_id = "base_link"
    pose_goal.header.stamp = rclpy.time.Time().to_msg()
    quat = quaternion_from_euler(0.0, 1.57, 3.14)
    pose_goal.pose.orientation.x = quat[0]
    pose_goal.pose.orientation.y = quat[1]
    pose_goal.pose.orientation.z = quat[2]
    pose_goal.pose.orientation.w = quat[3]
    pose_goal.pose.position.x = 0.36
    pose_goal.pose.position.y = -0.26
    pose_goal.pose.position.z = 0.005
    ur5_arm.set_goal_state(pose_stamped_msg=pose_goal, pose_link="flange")
    plan_and_execute(ur5, ur5_arm, logger, sleep_time=1.0, single_plan_parameters=single_plan_request_params)

def place(move_group):
    """Specifies, plans, and executes a place operation."""

    single_plan_request_params = PlanRequestParameters(
        ur5, "ompl_rrtc")
    
    # initialise multi-pipeline plan request parameters
    multi_pipeline_plan_request_params = MultiPipelinePlanRequestParameters(
        ur5, ["ompl_rrtc", "stomp_planner"]
    )

    # set plan start state to current state
    ur5_arm.set_start_state_to_current_state()

    pose_goal = PoseStamped()
    pose_goal.header.frame_id = "base_link"
    pose_goal.header.stamp = rclpy.time.Time().to_msg()
    quat = quaternion_from_euler(0.0, 1.57, 1.57)
    pose_goal.pose.orientation.x = quat[0]
    pose_goal.pose.orientation.y = quat[1]
    pose_goal.pose.orientation.z = quat[2]
    pose_goal.pose.orientation.w = quat[3]
    pose_goal.pose.position.x = -0.45
    pose_goal.pose.position.y = -0.08
    pose_goal.pose.position.z = 0.2467
    ur5_arm.set_goal_state(pose_stamped_msg=pose_goal, pose_link="flange")
    plan_and_execute(ur5, ur5_arm, logger, sleep_time=1.0)

    # Finally we specify the parameters for the open and close
    # posture of the grasp 
    openGripper()


if __name__=='__main__':
    # Initialise moveit and ROS node
    rclpy.init()
    logger = get_logger("moveit_py.pose_goal")

    # instantiate MoveItPy instance and get planning component
    ur5 = MoveItPy(node_name="moveit_py")
    ur5_arm = ur5.get_planning_component("ur5_arm")
    gripper = ur5.get_planning_component("gripper")
    logger.info("MoveItPy instance created")

    # instantiate a RobotState instance using the current robot model
    robot_model = ur5.get_robot_model()
    robot_state = RobotState(robot_model)

    # Plan and execute the pick operation
    pick(ur5_arm)

    #rclpy.sleep(1)

    # Plan and execute the place operaation
    #place(ur5_arm)